import asyncio

from aiogram import Bot, Dispatcher, executor, types

from aiogram.types import ParseMode
import GetDataFromURL as getTask
import Buttons_Input as kb


API_TOKEN = '5559949585:AAHFNSl8WQQgS_eDe7QCUmtfVoNFUCpRjQg'
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
photomotivation = open('files/3.png', 'rb')
photosmile = open('files/1.png', 'rb')
photostand = open('files/2.png', 'rb')


#–û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –í–∞—Ñ–ª—è –¢—è–Ω.\n–î–∞–≤–∞–π –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è, —Ç—ã –¥–∞–µ—à—å –º–Ω–µ –≤–∫—É—Å–Ω—è—à–∫–∏, –∞ —è –¥–µ–ª–∞—é —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–ª—è —Ç–µ–±—è", reply_markup=kb.hi_kb)
    await bot.send_photo(chat_id=message.chat.id, photo=photostand)

@dp.message_handler(text='–î–µ—Ä–∂–∏ –≤–∞—Ñ–ª—é üßá')
async def process_hi_command(message: types.Message):
    await message.reply("–°–º–æ—Ç—Ä–∏ –∫–∞–∫ –º–Ω–æ–≥–æ —è —É–º–µ—é:", reply_markup=kb.inline_kb1)

@dp.message_handler(text='–ü–æ–∫–∞! üëã')
async def process_hi_command(message: types.Message):
    await message.reply("–¢—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å –æ—Ç —á–µ–≥–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è", reply_markup=kb.hi_kb)





#async def Pars(wait_for,parser):
#    while True:
#        await asyncio.sleep(wait_for)
#        print('Parse')
#        pass

#if __name__ == '__main__':
#    loop=asyncio.get_event_loop()
#    loop.create_task(Pars(5,None))
#    executor.start_polling(dp,skip_updates=True)

#–í–æ—Ç —ç—Ç–∏ 2 –∫–Ω–æ–ø–∫–∏ –Ω–∞–¥–æ –≤—ã—Ä–µ–∑–∞—Ç—å –ø–æ–∑–∂–µ

@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_main(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,'–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã: WonderWaffles', reply_markup=kb.inline_kb1)

@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_callback_main(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,'–¢–µ–∫—É—â–∏–µ –ó–∞–¥–∞—á–∏: –¢–µ—Å—Ç–ó–∞–¥–∞—á–∞2,–¢–µ—Å—Ç–ó–∞–¥–∞—á–∞1, –°–∏–∫–≤–µ–ª, –°–¥–µ–ª–∞—Ç—å –ò–≥—Ä—É ', reply_markup=kb.inline_kb1)

@dp.callback_query_handler(lambda c: c.data == 'button5')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_audio(callback_query.from_user.id, 'https://cs9-11v4.vkuseraudio.net/p2/d57bc18638cddf.mp3?extra=7uNOyzgAUDODxh-NfXnIeBATJuf6IiL35g2hnNhJ_Tw0XEJhVHaFFJuMBqXxhvi3eZQnIo33O327_4Vi38uUkrGGivRwNlgUvtNoSyzEQkaHjSIhy6NDR5wVBHG1CBvh-a2g-dF9apFErtsMo7Gmic41yQ&long_chunk=1', reply_markup=kb.inline_kb2)


@dp.callback_query_handler(lambda c: c.data == 'button4')
async def process_callback_main(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_photo(callback_query.from_user.id, photo=photomotivation,reply_markup=kb.inline_kb1)




@dp.callback_query_handler(lambda c: c.data == 'button3')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_photo(callback_query.from_user.id, photo=photosmile)
    await bot.send_message(callback_query.from_user.id, "–Ø —É–º–Ω–∞—è –≤–∞—Ñ–ª—è, –∏ —Å–ª–µ–∂—É –∑–∞ —Ç–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, —Å–µ–π—á–∞—Å —è –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏,–Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ –ø–æ–¥–±–æ–¥—Ä–∏—Ç—å —Ç–µ–±—è",reply_markup=kb.inline_kb1)


@dp.callback_query_handler(lambda c: c.data == 'button7')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, " –¢–µ—Å—Ç–ó–∞–¥–∞—á–∞2 –î–µ–¥–ª–∞–π–Ω: 29 –∞–ø—Ä–µ–ª—è 2023–≥. 7:38 ",reply_markup=kb.inline_kb1)

@dp.callback_query_handler(lambda c: c.data == 'button8')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–¢–µ–ª–µ–≥—Ä–∞–º–º –¥–ª—è —Å–≤—è–∑–∏ @Edlissss ",reply_markup=kb.inline_kb1)

@dp.callback_query_handler(lambda c: c.data == 'button9')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –∫–∞–∫ —á–∞—Å—Ç–æ –º–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–¥–∞—á–∞—Ö? ",reply_markup=kb.inline_often)

@dp.callback_query_handler(lambda c: c.data == 'button10')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ù—É –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º,—á—Ç–æ —É —Ç–µ–±—è —Ç–∞–º –ø–æ–ª—É—á–∏–ª–æ—Å—å ",reply_markup=kb.inline_kb1)



#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

@dp.callback_query_handler(lambda c: c.data == 'buttonB')
async def process_callback_main(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–°–º–æ—Ç—Ä–∏ –∫–∞–∫ –º–Ω–æ–≥–æ —è —É–º–µ—é:", reply_markup=kb.inline_kb1)





#–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π

@dp.callback_query_handler(lambda c: c.data == 'often24')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ–±–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ",reply_markup=kb.inline_kb1)

@dp.callback_query_handler(lambda c: c.data == 'often12')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ–±–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ ",reply_markup=kb.inline_kb1)
    

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
